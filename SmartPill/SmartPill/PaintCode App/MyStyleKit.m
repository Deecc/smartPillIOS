//
//  MyStyleKit.m
//  ProjectName
//
//  Created by AuthorName on 23/11/14.
//  Copyright (c) 2014 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "MyStyleKit.h"


@implementation MyStyleKit

#pragma mark Cache

static UIColor* _iconColor = nil;

static UIImage* _imageOfTodayIcon = nil;
static UIImage* _imageOfBoxIcon = nil;
static UIImage* _imageOfExtras = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _iconColor = [UIColor colorWithRed: 0.775 green: 0 blue: 0 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)iconColor { return _iconColor; }

#pragma mark Drawing Methods

+ (void)drawTodayIcon;
{
    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Group
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(1.25, 2.75, 29, 29)];
        [UIColor.blackColor setStroke];
        rectanglePath.lineWidth = 1;
        [rectanglePath stroke];


        //// Rectangle 2 Drawing
        UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(1.25, 11.25, 29, 20.5)];
        [color2 setStroke];
        rectangle2Path.lineWidth = 1;
        [rectangle2Path stroke];


        //// Rectangle 3 Drawing
        UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(6, 1, 1, 8)];
        [color2 setFill];
        [rectangle3Path fill];
        [UIColor.blackColor setStroke];
        rectangle3Path.lineWidth = 1;
        [rectangle3Path stroke];


        //// Rectangle 4 Drawing
        UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(24, 1, 1, 8)];
        [color2 setFill];
        [rectangle4Path fill];
        [UIColor.blackColor setStroke];
        rectangle4Path.lineWidth = 1;
        [rectangle4Path stroke];


        //// Rectangle 5 Drawing
        UIBezierPath* rectangle5Path = [UIBezierPath bezierPathWithRect: CGRectMake(15, 1, 1, 8)];
        [color2 setFill];
        [rectangle5Path fill];
        [UIColor.blackColor setStroke];
        rectangle5Path.lineWidth = 1;
        [rectangle5Path stroke];
    }
}

+ (void)drawBoxIcon;
{

    //// Group
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(1, 4.5, 32, 26.5)];
        [UIColor.blackColor setStroke];
        rectanglePath.lineWidth = 1;
        [rectanglePath stroke];


        //// Rectangle 2 Drawing
        UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(1, 2, 32, 1)];
        [UIColor.blackColor setStroke];
        rectangle2Path.lineWidth = 1;
        [rectangle2Path stroke];


        //// Rectangle 3 Drawing
        UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(9, 3, 16, 1)];
        [UIColor.blackColor setStroke];
        rectangle3Path.lineWidth = 1;
        [rectangle3Path stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
        [bezier2Path moveToPoint: CGPointMake(1.5, 18.02)];
        [bezier2Path addLineToPoint: CGPointMake(32.5, 18.02)];
        [UIColor.blackColor setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(22.5, 30.48)];
        [bezierPath addLineToPoint: CGPointMake(22.5, 4.59)];
        [UIColor.blackColor setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
        [bezier3Path moveToPoint: CGPointMake(11.5, 30.48)];
        [bezier3Path addLineToPoint: CGPointMake(11.5, 4.59)];
        [UIColor.blackColor setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];
    }
}

+ (void)drawExtras;
{
    //// Color Declarations
    UIColor* color6 = [UIColor colorWithRed: 0.029 green: 0.024 blue: 0.024 alpha: 1];

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(13, 13, 8, 8)];
    [color6 setFill];
    [ovalPath fill];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(24, 13, 8, 8)];
    [color6 setFill];
    [oval2Path fill];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(2, 13, 8, 8)];
    [color6 setFill];
    [oval3Path fill];
}

#pragma mark Generated Images

+ (UIImage*)imageOfTodayIcon;
{
    if (_imageOfTodayIcon)
        return _imageOfTodayIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(31, 33), NO, 0.0f);
    [MyStyleKit drawTodayIcon];
    _imageOfTodayIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTodayIcon;
}

+ (UIImage*)imageOfBoxIcon;
{
    if (_imageOfBoxIcon)
        return _imageOfBoxIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 33), NO, 0.0f);
    [MyStyleKit drawBoxIcon];
    _imageOfBoxIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfBoxIcon;
}

+ (UIImage*)imageOfExtras;
{
    if (_imageOfExtras)
        return _imageOfExtras;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 34), NO, 0.0f);
    [MyStyleKit drawExtras];
    _imageOfExtras = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfExtras;
}

#pragma mark Customization Infrastructure

- (void)setTodayIconTargets: (NSArray*)todayIconTargets
{
    _todayIconTargets = todayIconTargets;

    for (id target in self.todayIconTargets)
        [target setImage: MyStyleKit.imageOfTodayIcon];
}

- (void)setBoxIconTargets: (NSArray*)boxIconTargets
{
    _boxIconTargets = boxIconTargets;

    for (id target in self.boxIconTargets)
        [target setImage: MyStyleKit.imageOfBoxIcon];
}

- (void)setExtrasTargets: (NSArray*)extrasTargets
{
    _extrasTargets = extrasTargets;

    for (id target in self.extrasTargets)
        [target setImage: MyStyleKit.imageOfExtras];
}


@end
